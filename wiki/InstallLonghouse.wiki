#summary Instructions for installing and running Longhouse.
#labels Featured,LonghouseVersion-0.1

= How to Install and Run Longhouse =

== Table of Contents ==


  # [InstallLonghouse#Dependencies Dependencies]
  # [InstallLonghouse#Installation Installation]
  # [InstallLonghouse#Configuration Configuration]
  # [InstallLonghouse#Generate_Code Generate Code]
  # [InstallLonghouse#Run Run]
  # [InstallLonghouse#Use_Longhouse Use Longhouse]
  # [InstallLonghouse#Shut_Down Shut Down]

== Dependencies ==

Longhouse requires:
  * Python - http://www.python.org/
    * Version 2.5 or higher is required
  * Subversion - http://subversion.tigris.org/
  * Twisted - http://twistedmatrix.com/
    * Version 8.0.1 or higher is required
    * Recommended download: http://tmrc.mit.edu/mirror/twisted/Twisted/8.0/Twisted-8.0.1.tar.bz2
  * zope.interface
    * Comes packaged with Zope3, although only zope.interface is needed by Longhouse
    * Recommended download: http://www.zope.org/Products/ZopeInterface/3.3.0/zope.interface-3.3.0.tar.gz
  * PyYaml
    * Recommended download: http://pyyaml.org/download/pyyaml/PyYAML-3.05.tar.gz


You must install both Python and Subversion before installing Longhouse. 

There are three options for installing the required packages (Twisted, zope.interface, and PyYaml)
  # Install the packages as described in their respective installation procedures. This will make them available to all Python programs, including Longhouse.
  # Extract the packages' source into Longhouse's /lib directory. This will make them available exclusively to Longhouse. This is useful if, say, you wanted to use a different version of Twisted for another project. Now your /lib directory should be structured like the following...
    * lib/
      * ezt/
        * ...
      * twisted/
        * application/
        * web/
        * ...
      * yaml/
        * __init__.py
        * composer.py
        * ...
      * zope/
        * __init__.py
        * interface/
          * ...      
  # Go to the Longhouse download section to download the longhouse dependencies tarball. Extract this into Longhouse's /lib directory.

*IMPORTANT NOTE:* Some methods of distributing Python 2.5 do not seem to include the `hashlib` library, which will create an error when you attempt to run Longhouse. Darwinports is known to have this problem at the time of writing. If you experience this issue, you may either install a standard release of 2.5.2 from [http://www.python.org python.org] or obtain `hashlib` from [http://pypi.python.org/pypi/hashlib/20060408a here].

Once you install Subversion, take note of where the `svn` command is located. We will need this later. A common location is `/usr/local/bin/svn`. On Unix systems, run the command `which svn` to find where `svn` is located.

== Installation ==

Download the latest Longhouse install from Longhouse's Google Code site, at http://code.google.com/p/longhouse/. Decompress the archive and place the source files where you'd like them to reside - the specific location doesn't matter for the purposes of running the software. You should see a `/src` folder inside the folder created when you decompressed the Longhouse archive, and inside the `/src` folder should be all of the Longhouse source files.

== Configuration ==

Longhouse requires a configuration file in order to run properly. Navigate to the directory that you copied the Longhouse source files to. Inside the `/src` directory, you should see several files, including:
  * `COPYING`
  * `config.yml.example`
  * `run.py`
  * `shutdown.py`

You're going to need to create a config file in order to ensure that Longhouse runs properly. The install should have an example config file added, named `config.yml.example`, so you may simply create a new config file from the example. On Unix systems you can achieve this by running the command `cp config.yml.example config.yml` in the `/src` directory. 

The Longhouse config file has five values that need to be present in order for Longhouse to run. The first value is the `working_dir` variable. This variable describes where the Longhouse source files are located on your system. For example, if the directory that I moved my Longhouse files to was `/Users/exampleuser/Longhouse`, I'd write, as the first line of the `config.yml` file:

`working_dir: /Users/exampleuser/Longhouse/src`

Make sure to include the `/src` at the end of your `working_dir`! It's very important that this path point directly to where your `config.yml` file is located.

The next value to specify is the port you want the Longhouse server to run on. Choose whatever value you want that isn't being used by any other services running on your machine. One common port to use is port `80` or `8080`. We recommend simply using `8080` unless there is another program using it, or another reason to not use it. The line describing the port looks like:

`port: 8080`

The third value you're going to define is whether you want the process to be daemonized or not. If you use the value `true`, when you run Longhouse it will spawn a separate process, so you'll be free to close your Python environment or command-line invocation. In this case you can use the `shutdown.py` script to shut down Longhouse. If you use `false`, it behaves like a regular Python application, running while your invocation of the Python runtime environment is active. So, this line looks like the following:

`daemonized: true`

or

`daemonized: false`

Next, specify whether you want Longhouse to log itself to a log file or not. This is crucial if you specified `daemonized: true`; if you run Longhouse as a separate process you will need to specify `logging: true` to have any output from Longhouse.

`logging: true`

or

`logging: false`

Finally, specify the location of your `svn` command. For example, mine is located at `/usr/local/bin/svn`, so I'd write:

`svn: /usr/local/bin/svn`

My entire config file is as follows:

`working_dir: /Users/exampleuser/Longhouse/src`

`port: 8080`

`daemonized: false`

`logging: true`

`svn: /usr/local/bin/svn`

== Generate Code ==

If you downloaded Longhouse as a release, you may skip this step because all the code you need to run Longhouse has already been generated. However if you checked out the source code directly from the repository you will need to complete one last step before starting the system. Navigate to the `/src/scripts` directory and run `yaml_to_bo.py`. This script reads the files in `/src/bo/yaml` and generates several python modules in `/src/bo` named `generated_*.py`. Without these generated files, Longhouse cannot run. 

If you encounter any errors with this step, check our [FAQTroubleshoot FAQ/Troubleshooting page].

== Run ==

Run the file `run.py` in the `/src` directory. If all goes well, Longhouse should be running properly. If you encounter any errors, check our [FAQTroubleshoot FAQ/Troubleshooting page].

== Use Longhouse ==

Visit `http://localhost:portnumber/` to test whether Longhouse is running, where `portnumber` is the value you specified for `port` in the `config.yml` file. If you encounter an 'Unable to connect' or similar error, it means Longhouse isn't running on that port for one reason or another. Check our [FAQTroubleshoot FAQ/Troubleshooting page] to find out why.

== Shut Down ==

If you specified `daemonized: true` in the `config.yml` file, you need to run `shutdown.py` to shut Longhouse down. If not, simply exit the program in which you invoked `run.py`.